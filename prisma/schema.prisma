generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  credits         Int              @default(10)
  accounts        Account[]
  sessions        Session[]
  unitQuizResults UnitQuizResult[]
}

model Course {
  id    String @id @default(cuid())
  name  String
  image String
  units Unit[]
}

model Unit {
  id              String             @id @default(cuid())
  courseId        String
  name            String
  course          Course             @relation(fields: [courseId], references: [id])
  chapters        Chapter[]
  unitQuizResults UnitQuizResult[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id                 String             @id @default(cuid())
  unitId             String
  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?            @db.VarChar(3000)
  unit               Unit               @relation(fields: [unitId], references: [id])
  questions          Question[]
  chapterContent     ChapterContent?
  chapterQuizResults ChapterQuizResult[]

  @@index([unitId], name: "unitId")
}

model ChapterContent {
  id         String   @id @default(cuid())
  chapterId  String   @unique
  summary    Json     @db.Json
  keyPoints  Json     @db.Json

  chapter Chapter @relation(fields: [chapterId], references: [id])
}

model Question {
  id        String  @id @default(cuid())
  chapterId String
  question  String  @db.VarChar(3000)
  answer    String  @db.VarChar(3000)
  options   String  @db.VarChar(3000)
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model UnitQuizResult {
  id             String              @id @default(cuid())
  userId         String
  unitId         String
  completedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  chapterQuizResults ChapterQuizResult[]

  @@unique([userId, unitId])
  @@index([userId], name: "userId")
  @@index([unitId], name: "unitId")
}

model ChapterQuizResult {
  id               String          @id @default(cuid())
  unitQuizResultId String
  chapterId        String
  score            Int             @default(0)
  wrongAnswers     Json?       
  completedAt      DateTime?

  unitQuizResult UnitQuizResult @relation(fields: [unitQuizResultId], references: [id], onDelete: Cascade)
  chapter        Chapter         @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([unitQuizResultId, chapterId])
  @@index([chapterId], name: "chapterId")
}
